PUC-Minas - ICEI - Ciência da Computação
Algoritmos e Estruturas de Dados I - Aula 2025-1_005
Anotações
___

Resumo da semana

Introdução à linguagem de programação C


1. Alternativas

Exemplos de aplicações
   
1.1. Identificar valores negativos, zeros e positivos

      |                    |                   |
      v                    v                   v
  (x == 0)              (x > 0)	            (x < 0)	
  V/    \F              V/   \F             V/   \F
  /      \              /     \             /     \
igual  diferente     maior  diferente    menor  diferente
          |                    |                   |
	  v          	       v       		   v
      ( x > 0 )      	  ( x == 0 )           ( x > 0 )
      V/     \F            V/     \F           V/     \F
      /       \      	   /       \           /       \
    maior    menor      igual     menor      maior    igual
	

      |                    |                   |
      v                    v                   v
  (x == 0)              (x > 0)	            (x < 0)	
  V/    \F              V/   \F             V/   \F
  /      \              /     \             /     \
igual  diferente     maior  diferente    menor  diferente
          |                    |                   |
	  v          	       v        	   v
      ( x < 0 )      	   ( x < 0 )           ( x == 0 )
      V/     \F            V/     \F           V/      \F
      /       \      	   /       \           /        \
    menor    maior      menor     igual      igual     maior

___
	
1.2. Identificar valor relativo a um intervalo

      |                     |                         |
      v                     v                         v
(1<=x && x<=10)       (1<=x && x<=10)       ( ! (1<=x && x<=10) )
  V/      \F            V/      \F                V/      \F
  /        \            /        \                /        \
dentro    fora       dentro     fora            fora     dentro
            |                     |               |
	    v          	          v               v
        ( x < 1 )      	     ( x > 10 )       ( x > 0 )
        V/     \F            V/      \F       V/     \F
        /       \      	     /        \       /       \
      menor    maior	   maior     menor maior    menor

___

1.3. Identificar valor relativo a um intervalo

     dígitos              maiúsculas            minúsculas
        |                     |                     |
        v                     v                     v
('0'<=x && x<='9')    ('A'<=x && x<='Z')    ('a'<=x && x<='z')
    V/      \F           V/       \F           V/       \F
    /        \           /         \           /         \
 dentro     fora      dentro      fora       fora      dentro

___
___

2. Repetições

Exemplos de aplicações

2.1. Garantir entradas de dados submetida à condições

    // ler valor positivo
       int x = 0;
       do
       {       
           printf ( "\nx = " );
           scanf  ( "%d", &x );
           getchar( );
       }
       while ( x < 0 );
    // poscondicao: (x>=0)

___

    // ler intervalo
       int a = 0, b = 0;
       printf ( "\na = " );
       scanf  ( "%d", &a );
       getchar( );
       do
       {
           printf ( "\nb = " );
           scanf  ( "%d", &b );
           getchar( );
       }
       while ( b <= a );
    // poscondicao: (a<b) -> intervalo (a:b)
    
2.2. Mapear caracteres em uma cadeia

    // mostrar cada simbolo em uma cadeia de caracteres
       char  cadeia [ ] = "AbCdE";
       int   posicao = 0;
       for ( posicao = 0; posicao < strlen(cadeia); posicao = posicao+1 )
       {
	   printf ( "\n%d: %c", posicao, cadeia [posicao] );
       } // end for
       
2.3. Mapear e filtrar caracteres com certa característica

    // mostrar cada simbolo em uma cadeia de caracteres
       char  cadeia [ ] = "AbCdE";
       int   posicao = 0;
       for ( posicao = 0; posicao < strlen(cadeia); posicao = posicao+1 )
       {
        // filtrar maisculas
           if ( 'A' <= cadeia [posicao] && cadeia [posicao] < 'Z' )
	   {  printf ( "\n%d: %c", posicao, cadeia [posicao] ); }
       } // end for

2.4. Mapear, filtrar e reduzir caracteres com certa característica

    // mostrar cada simbolo em uma cadeia de caracteres
       char  cadeia [ ] = "AbCdE";
       int   posicao = 0, contador = 0;
       for ( posicao = 0; posicao < strlen(cadeia); posicao = posicao+1 )
       {
        // filtrar maisculas
           if ( 'A' <= cadeia [posicao] && cadeia [posicao] < 'Z' )
	   {  // mostrar
	      printf ( "\n%d: %c", posicao, cadeia [posicao] );
              // contar
              contador = contador + 1;	      
	   } // end if
       } // end for
       printf ( "\ntotal de maiusculas = %d", contador );

2.5. Realizar operações enquanto não estabelecer condição

    // repetir 3 vezes
       int vezes    = 3;    // variavel de controle (valor inicial)
       int contador = 1;    // independente
       while ( vezes > 0 )  // teste depende da variavel de controle 
       {
	 // mostrar
            printf ( "\ncontador = %d", contador );
         // variar
            contador = contador + 1; // variacao independente
            vezes    = vezes    - 1; // variacao sobre o controle	    
       } // end while
    // poscondicao: (vezes<=0)

Funções

1.) Protótipo
    Definição prévia para identificar tipo e lista de parâmetros.
    Deverá preceder o uso e ter separador (';')
	
    // assinatura = prototipo
    // tipo        parametros
       ____ nome ( __________ ); // <- NECESSARIO USAR ';'
   
2.) Esboço de definição
    Definição mínima, com cabeçalho e corpo, contendo retorno.
    Recomendado ter um retorno ao final do corpo.
	
    // assinatura = cabecalho 
    // tipo        parametros
       ____ nome ( __________ )
       {  // corpo
             ____ variavel = valor_inicial;
             return ( varivel );
       } // fim funcao
___
